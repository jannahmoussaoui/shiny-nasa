print(before_facet %>%
group_by(profile) %>%
summarize(count = n())) # 11 Tom and 23 Abby
# now do the same with after
after_facet <- read.csv("AFTER Data - GM Facet.csv")
after_facet <- na.omit(after_facet)
after_facet <- after_facet %>%
rename_with(~ "Q1a", 2) %>%
rename_with(~ "Q1b", 3) %>%
rename_with(~ "Q1c", 4) %>%
rename_with(~ "Q1d", 5) %>%
rename_with(~ "Q1e", 6) %>%
rename_with(~ "Q1f", 7) %>%
rename_with(~ "Q1g", 8) %>%
rename_with(~ "Q2", 9) %>%
rename_with(~ "Q3", 10) %>%
rename_with(~ "Q4", 11) %>%
rename_with(~ "Q5", 12) %>%
rename_with(~ "Q6", 13) %>%
rename_with(~ "Q7", 14) %>%
rename_with(~ "Q8", 15) %>%
rename_with(~ "Q9", 16) %>%
rename_with(~ "Q10", 17) %>%
rename_with(~ "Q11", 18) %>%
rename_with(~ "Q12", 19) %>%
rename_with(~ "Q13", 20) %>%
rename_with(~ "Q14", 21)
after_facet$Tx <- "A"
after_facet$info_processing <- rowSums(after_facet[, c("Q9", "Q10", "Q11")], na.rm = TRUE)
mean(after_facet$info_processing) # 22.05882
after_facet <- after_facet %>%
mutate(profile = case_when(info_processing >= 22.05882 ~ "abby",
info_processing < 22.05882 ~ "tom"))
print(after_facet %>%
group_by(profile) %>%
summarize(count = n())) # 14 Tom and 20 Abby
# Now we're going to want to create a master data frame. We can only combine 2 data frames at a time
# Use rbind to stack the facet data frames...all columns have to be the same, we're just adding rows below
before_after_facet <- rbind(before_facet, after_facet)
# Now we merge the combined before and after facets. We use merge instead of rbind because merge allows us to put data frames by side by side, allowing for different columns
# While we're at it, let's also pivot the three columns into long form, placing them under a "Info_Used" column and butting their values in "value"
master_data <- merge(bx_data, before_after_facet, all.x = TRUE) %>%
pivot_longer(cols = c("Game State", "Prior Actions", "Prior Explanation"),
names_to = "Info_Used",
values_to = "value")
# Create a histogram for info processing facets for before
ggplot(before_facet, aes(x = info_processing, fill = cut(info_processing, breaks = c(-Inf, 21.97059, Inf), labels = c("tom", "abby")))) +
geom_histogram(binwidth = 1, color = "white", alpha = 0.7) +
scale_fill_manual(values = c("tom" = "lightblue", "abby" = "pink")) +
labs(x = "Info Processing Facet", y = "Frequency", title = "Before Prototype", fill = "Profile") +
theme_minimal() +
geom_text(
stat = "count",
aes(label = ..count..),
position = position_stack(vjust = 0.5),
show.legend = FALSE,
size = 4)
# do the same with after
ggplot(after_facet, aes(x = info_processing, fill = cut(info_processing, breaks = c(-Inf, 22.05882, Inf), labels = c("tom", "abby")))) +
geom_histogram(binwidth = 1, color = "white", alpha = 0.7) +
scale_fill_manual(values = c("tom" = "lightblue", "abby" = "pink")) +
labs(x = "Info Processing Facet", y = "Frequency", title = "After Prototype", fill = "Profile") +
theme_minimal() +
geom_text(
stat = "count",
aes(label = ..count..),
position = position_stack(vjust = 0.5),
show.legend = FALSE,
size = 4)
# To make graphing easier, we'll subset the master dataframe
subset_b <- subset(master_data, Tx == "B")
subset_a <- subset(master_data, Tx == "A")
# We'll also define the order we want the trials
desired_order <- c("G1M0", "G1M2", "G1M4", "G1M6", "G1M8", "G1M10", "G2M1", "G2M3", "G2M5", "G2M7", "G2M9", "G3M0", "G3M2", "G3M4", "G3M6", "G3M8", "G3M10", "G3M12")
# Convert TrialName to a factor with the desired order
subset_b$TrialName <- factor(subset_b$TrialName, levels = desired_order)
subset_a$TrialName <- factor(subset_a$TrialName, levels = desired_order)
# Create a grid of bar plots
b_grid <- ggplot(subset_b, aes(x = Info_Used, y = value, fill = Info_Used)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(Participant.ID ~ TrialName, scales = "free_y", space = "free_y") +
labs(x = "", y = "", fill = "Info_Used") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 0),
axis.text.y = element_text(size = 0),
strip.text.y = element_text(angle = 0, hjust = 1, size = 10, face = "bold"),
strip.text.x = element_text(angle = 0, hjust = .5, size = 10, face = "bold"),
panel.spacing.x = unit(1.5, "lines")
) +
scale_fill_manual(values = c("Game State" = "#390099", "Prior Actions" = "#ff0054", "Prior Explanation" = "#ffbd00"))
ggsave("grid_before.pdf", plot = b_grid, width = 20, height = 15, units = "in", dpi = 300)
# Create a grid of bar plots
b_grid <- ggplot(subset_b, aes(x = Info_Used, y = value, fill = Info_Used)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(Participant.ID ~ TrialName, scales = "free_y", space = "free_y") +
labs(x = "", y = "", fill = "Info_Used") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 0),
axis.text.y = element_text(size = 0),
strip.text.y = element_text(angle = 0, hjust = 1, size = 10, face = "bold"),
strip.text.x = element_text(angle = 0, hjust = .5, size = 10, face = "bold"),
panel.spacing.x = unit(1.5, "lines")
) +
scale_fill_manual(values = c("Game State" = "#390099", "Prior Actions" = "#ff0054", "Prior Explanation" = "#ffbd00"))
ggsave("grid_before.pdf", plot = b_grid, width = 20, height = 15, units = "in", dpi = 300)
# Create a grid of bar plots
a_grid <- ggplot(subset_a, aes(x = Info_Used, y = value, fill = Info_Used)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(Participant.ID ~ TrialName, scales = "free_y", space = "free_y") +
labs(x = "", y = "", fill = "Info_Used") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 0),
axis.text.y = element_text(size = 0),
strip.text.y = element_text(angle = 0, hjust = 1, size = 10, face = "bold"),
strip.text.x = element_text(angle = 0, hjust = .5, size = 10, face = "bold"),
panel.spacing.x = unit(1.5, "lines")
) +
scale_fill_manual(values = c("Game State" = "#390099", "Prior Actions" = "#ff0054", "Prior Explanation" = "#ffbd00"))
ggsave("grid_after.pdf", plot = a_grid, width = 20, height = 15, units = "in", dpi = 300)
# Create a grid of bar plots with adjusted panel spacing, centered strip text, and colored strip text.y
b_grid <- ggplot(subset_b, aes(x = Info_Used, y = value, fill = Info_Used)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(Participant.ID ~ TrialName, scales = "free_y", space = "free_y") +
labs(x = "", y = "", fill = "Info_Used") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 0),
axis.text.y = element_text(size = 0),
strip.text.y = element_text(angle = 0, hjust = 1, size = 10, face = "bold"),
strip.text.x = element_text(angle = 0, hjust = 0.5, size = 10, face = "bold"),  # Centered strip text
panel.spacing.x = unit(1.5, "lines")  # Adjust the spacing between facet columns
) +
scale_fill_manual(values = c("Game State" = "#390099", "Prior Actions" = "#ff0054", "Prior Explanation" = "#ffbd00"))
ggsave("grid_before.pdf", plot = b_grid, width = 20, height = 15, units = "in", dpi = 300)
# Create a grid of bar plots with adjusted panel spacing, centered strip text, and colored strip text.y
a_grid <- ggplot(subset_a, aes(x = Info_Used, y = value, fill = Info_Used)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(Participant.ID ~ TrialName, scales = "free_y", space = "free_y") +
labs(x = "", y = "", fill = "Info_Used") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 0),
axis.text.y = element_text(size = 0),
strip.text.y = element_text(angle = 0, hjust = 1, size = 10, face = "bold"),
strip.text.x = element_text(angle = 0, hjust = 0.5, size = 10, face = "bold"),  # Centered strip text
panel.spacing.x = unit(1.5, "lines")  # Adjust the spacing between facet columns
) +
scale_fill_manual(values = c("Game State" = "#390099", "Prior Actions" = "#ff0054", "Prior Explanation" = "#ffbd00"))
ggsave("grid_after.pdf", plot = a_grid, width = 20, height = 15, units = "in", dpi = 300)
library(readxl)
library(tidyverse)
library(ggplot2)
dat <- read_excel("rawdata.xlsx")
# Logistic models...can print and summarize these (this is for the volunteer question)
logistic_model1 <- glm(Volunteering_decision_0NO_1YES ~ Meaningfulness_on_bullshit_sentences, data = dat, family = binomial)
logistic_model2 <- glm(Volunteering_decision_0NO_1YES ~ Meaningfulness_on_genuine_sentences, data = dat, family = binomial)
logistic_model3 <- glm(Volunteering_decision_0NO_1YES ~ Bullshit_sensitivity, data = dat, family = binomial)
print(logistic_model1)
print(logistic_model2)
print(logistic_model3)
summary(logistic_model1)
summary(logistic_model2)
summary(logistic_model3)
# Draw a plot for all three, start with BS Receptivity
combined_plot1 <- ggplot(dat, aes(x = Meaningfulness_on_bullshit_sentences, y = Volunteering_decision_0NO_1YES)) +
geom_point() +
geom_smooth(aes(color = "Model 1"), method = "glm", method.args = list(family = "binomial"), se = FALSE) +
labs(title = "Logistic Regression: Volunteering Decision ~ Meaningfulness/Sensitivity",
x = "Meaningfulness/Sensitivity",
y = "Volunteering Decision (0=NO, 1=YES)") +
theme_minimal()
# P receptivity and BS sensitivity
combined_plot1 <- combined_plot1 +
geom_smooth(data = dat, aes(x = Meaningfulness_on_genuine_sentences, y = Volunteering_decision_0NO_1YES, color = "Model 2"),
method = "glm", method.args = list(family = "binomial"), se = FALSE) +
geom_smooth(data = dat, aes(x = Bullshit_sensitivity, y = Volunteering_decision_0NO_1YES, color = "Model 3"),
method = "glm", method.args = list(family = "binomial"), se = FALSE)
# Combine
combined_plot1 <- combined_plot1 +
scale_color_manual(values = c("Model 1" = "blue", "Model 2" = "red", "Model 3" = "purple"),
name = "Models",
labels = c("BS-Receptivity", "P-Receptivity", "BS-Sensitivity"))
# Print the whole thing
print(combined_plot1)
# Create questions
## ShinySurveys expects these to be in a data frame
## Combining non-matrix with matrix questions has rendered
## some functions virtually useless, e.g., getSurveyData
## doesn't know how to aggregate, so I did it via tibble
df1 <- data.frame(question = "Session name:",
option = "e.g., Course CRN",
input_type = "text",
input_id = "session_id",
dependence = NA,
dependence_value = NA,
required = F) %>%
mutate(question_id = input_type)
library(tidyr)
library(dplyr)
library(shiny)
library(shinysurveys)
library(tibble)
library(googlesheets4)
library(googledrive)
# Create questions
## ShinySurveys expects these to be in a data frame
## Combining non-matrix with matrix questions has rendered
## some functions virtually useless, e.g., getSurveyData
## doesn't know how to aggregate, so I did it via tibble
df1 <- data.frame(question = "Session name:",
option = "e.g., Course CRN",
input_type = "text",
input_id = "session_id",
dependence = NA,
dependence_value = NA,
required = F) %>%
mutate(question_id = input_type)
df2 <- data.frame(question = "Group:",
option = t(c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z")),
input_type = "select",
input_id = "group",
dependence = NA,
dependence_value = NA,
required = F) %>%
pivot_longer(cols = starts_with("option"),
values_to = "option") %>%
mutate(question_id = input_type)
df3 <- data.frame(question = "Code name:",
option = "e.g., Your alias",
input_type = "text",
input_id = "code_name",
dependence = NA,
dependence_value = NA,
required = F) %>%
mutate(question_id = input_type)
df4 <- data.frame(question = c(rep("Box of matches", 15),
rep("Food concentrate", 15),
rep("50 feet of nylon rope", 15),
rep("Parachute silk", 15),
rep("Portable heating unit", 15),
rep("Two .45 caliber pistol", 15),
rep("One case of dehydrated milk", 15),
rep("Two 100 lb. tanks of oxygen", 15),
rep("Stellar map", 15),
rep("Self-inflating life raft", 15),
rep("Magnetic compass", 15),
rep("20 liters of water", 15),
rep("Signal flares", 15),
rep("First aid kit, including injection needle", 15),
rep("Solar-powered FM receiver-transmitter", 15)),
option = c(rep(c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15"), 15)),
input_type = c(rep("matrix", 225)),
input_id = c(rep("nasa_matrix", 225)),
dependence = NA,
dependence_value = NA,
required = TRUE
) %>%
mutate(question_id = paste0(input_type, "_", gsub(" ", "_", question)))
df <- bind_rows(df1, df2, df3, df4)
response_data <- tibble(
Session_ID = input$session_id,
Code_name = input$code_name,
Group = input$group
)
response_data <- tibble(
Session_ID = input$session_id,
Code_name = input$code_name,
Group = input$group
)
runApp('C:/_MYWORK/xFTM/ftm_shinynasa/NASA_Survey/App_test.R')
runApp('C:/_MYWORK/xFTM/ftm_shinynasa/NASA_Survey/App_test.R')
df4 <- data.frame(question = "Box of matches",
option = t(c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15")),
input_type = "mc",
input_id = "matches",
dependence = NA,
dependence_value = NA,
required = TRUE
)
View(df4)
df4 <- data.frame(question = "Box of matches",
option = t(c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15")),
input_type = "mc",
input_id = "matches",
dependence = NA,
dependence_value = NA,
required = TRUE
)  %>%
pivot_longer(cols = starts_with("option"),
values_to = "option")
View(df4)
# Function to create a multiple-choice data frame for each item
create_mc_df <- function(item, input_id_prefix) {
data.frame(
question = item,
option = t(c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15")),
input_type = "mc",
input_id = paste0(input_id_prefix, "_", gsub(" ", "_", item)),
dependence = NA,
dependence_value = NA,
required = TRUE
) %>%
pivot_longer(cols = starts_with("option"),
values_to = "option")
}
# List of items
items <- c("50 feet of nylon rope", "Parachute silk", "Portable heating unit",
"Two .45 caliber pistol", "One case of dehydrated milk",
"Two 100 lb. tanks of oxygen", "Stellar map", "Self-inflating life raft",
"Magnetic compass", "20 liters of water", "Signal flares",
"First aid kit, including injection needle", "Solar-powered FM receiver-transmitter")
# Create data frames for each item
df_list <- lapply(items, function(item) create_mc_df(item, "nasa_matrix"))
# Combine all data frames into a single data frame
df_combined <- bind_rows(df_list)
View(df)
runApp('C:/_MYWORK/xFTM/ftm_shinynasa/NASA_Survey/App_test.R')
runApp('C:/_MYWORK/xFTM/ftm_shinynasa/NASA_Survey/App_test.R')
View(df)
df1 <- data.frame(question = "Session name:",
option = "e.g., Course CRN",
input_type = "text",
input_id = "session_id",
dependence = NA,
dependence_value = NA,
required = F)
df2 <- data.frame(question = "Group:",
option = t(c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z")),
input_type = "select",
input_id = "group",
dependence = NA,
dependence_value = NA,
required = F) %>%
pivot_longer(cols = starts_with("option"),
values_to = "option")
df3 <- data.frame(question = "Code name:",
option = "e.g., Your alias",
input_type = "text",
input_id = "code_name",
dependence = NA,
dependence_value = NA,
required = F)
df4 <- data.frame(question = "Box of matches",
option = t(c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15")),
input_type = "mc",
input_id = "matches",
dependence = NA,
dependence_value = NA,
required = TRUE
)  %>%
pivot_longer(cols = starts_with("option"),
values_to = "option")
df5 <- data.frame(question = "Food Concentrate",
option = t(c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15")),
input_type = "mc",
input_id = "food",
dependence = NA,
dependence_value = NA,
required = TRUE
)  %>%
pivot_longer(cols = starts_with("option"),
values_to = "option")
df6 <- data.frame(question = "50 feet of nylon rope",
option = t(c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15")),
input_type = "mc",
input_id = "nylon",
dependence = NA,
dependence_value = NA,
required = TRUE
)  %>%
pivot_longer(cols = starts_with("option"),
values_to = "option")
df7 <- data.frame(question = "Parachute silk",
option = t(c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15")),
input_type = "mc",
input_id = "silk",
dependence = NA,
dependence_value = NA,
required = TRUE
)  %>%
pivot_longer(cols = starts_with("option"),
values_to = "option")
df8 <- data.frame(question = "Portable heating unit",
option = t(c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15")),
input_type = "mc",
input_id = "heating",
dependence = NA,
dependence_value = NA,
required = TRUE
)  %>%
pivot_longer(cols = starts_with("option"),
values_to = "option")
df9 <- data.frame(question = "Two .45 caliber pistol",
option = t(c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15")),
input_type = "mc",
input_id = "pistol",
dependence = NA,
dependence_value = NA,
required = TRUE
)  %>%
pivot_longer(cols = starts_with("option"),
values_to = "option")
df10 <- data.frame(question = "One case of dehydrated milk",
option = t(c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15")),
input_type = "mc",
input_id = "milk",
dependence = NA,
dependence_value = NA,
required = TRUE
)  %>%
pivot_longer(cols = starts_with("option"),
values_to = "option")
df11 <- data.frame(question = "Two 100 lb. tanks of oxygen",
option = t(c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15")),
input_type = "mc",
input_id = "oxygen",
dependence = NA,
dependence_value = NA,
required = TRUE
)  %>%
pivot_longer(cols = starts_with("option"),
values_to = "option")
df12 <- data.frame(question = "Stellar map",
option = t(c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15")),
input_type = "mc",
input_id = "map",
dependence = NA,
dependence_value = NA,
required = TRUE
)  %>%
pivot_longer(cols = starts_with("option"),
values_to = "option")
df13 <- data.frame(question = "Self-inflating life raft",
option = t(c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15")),
input_type = "mc",
input_id = "raft",
dependence = NA,
dependence_value = NA,
required = TRUE
)  %>%
pivot_longer(cols = starts_with("option"),
values_to = "option")
df14 <- data.frame(question = "Magnetic compass",
option = t(c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15")),
input_type = "mc",
input_id = "compass",
dependence = NA,
dependence_value = NA,
required = TRUE
)  %>%
pivot_longer(cols = starts_with("option"),
values_to = "option")
df15 <- data.frame(question = "20 liters of water",
option = t(c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15")),
input_type = "mc",
input_id = "water",
dependence = NA,
dependence_value = NA,
required = TRUE
)  %>%
pivot_longer(cols = starts_with("option"),
values_to = "option")
df16 <- data.frame(question = "Signal flares",
option = t(c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15")),
input_type = "mc",
input_id = "flare",
dependence = NA,
dependence_value = NA,
required = TRUE
)  %>%
pivot_longer(cols = starts_with("option"),
values_to = "option")
df17 <- data.frame(question = "First aid kit, including injection needle",
option = t(c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15")),
input_type = "mc",
input_id = "injection",
dependence = NA,
dependence_value = NA,
required = TRUE
)  %>%
pivot_longer(cols = starts_with("option"),
values_to = "option")
df18 <- data.frame(question = "Solar-powered FM receiver-transmitter",
option = t(c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15")),
input_type = "mc",
input_id = "receiver",
dependence = NA,
dependence_value = NA,
required = TRUE
)  %>%
pivot_longer(cols = starts_with("option"),
values_to = "option")
df <- bind_rows(df1, df2, df3, df4, df5, df6, df7, df8, df9, df10, df11, df12, df13, df14, df15, df16, df17, df18)
View(df)
runApp('C:/_MYWORK/xFTM/ftm_shinynasa/NASA_Survey/App_test.R')
runApp('C:/_MYWORK/xFTM/ftm_shinynasa/NASA_Survey/App_test.R')
runApp('C:/_MYWORK/xFTM/ftm_shinynasa/NASA_Survey/App_test.R')
runApp('C:/_MYWORK/xFTM/ftm_shinynasa/NASA_Survey/App_test.R')
runApp('C:/_MYWORK/xFTM/ftm_shinynasa/NASA_Survey/App_test.R')
runApp('C:/_MYWORK/xFTM/ftm_shinynasa/NASA_Survey/App_test.R')
runApp('C:/_MYWORK/xFTM/ftm_shinynasa/NASA_Survey/App_test.R')
runApp('C:/_MYWORK/xFTM/ftm_shinynasa/NASA_Survey/App_test.R')
runApp('C:/_MYWORK/xFTM/ftm_shinynasa/NASA_Survey/App_test.R')
runApp('C:/_MYWORK/xFTM/ftm_shinynasa/NASA_Survey/App_test.R')
runApp('C:/_MYWORK/xFTM/ftm_shinynasa/NASA_Survey/App_test.R')
runApp('C:/_MYWORK/xFTM/ftm_shinynasa/NASA_Survey/App_test.R')
runApp('C:/_MYWORK/xFTM/ftm_shinynasa/NASA_Survey/App_test.R')
setwd("C:/_MYWORK/xFTM/ftm_shinynasa/NASA_Survey")
runApp()
